// Copyright (c) Abstract Machines
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	certs "github.com/absmach/certs"

	mock "github.com/stretchr/testify/mock"
)

// MockCSRRepository is an autogenerated mock type for the CSRRepository type
type MockCSRRepository struct {
	mock.Mock
}

type MockCSRRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCSRRepository) EXPECT() *MockCSRRepository_Expecter {
	return &MockCSRRepository_Expecter{mock: &_m.Mock}
}

// CreateCSR provides a mock function with given fields: _a0, _a1
func (_m *MockCSRRepository) CreateCSR(_a0 context.Context, _a1 certs.CSR) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateCSR")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, certs.CSR) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCSRRepository_CreateCSR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCSR'
type MockCSRRepository_CreateCSR_Call struct {
	*mock.Call
}

// CreateCSR is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 certs.CSR
func (_e *MockCSRRepository_Expecter) CreateCSR(_a0 interface{}, _a1 interface{}) *MockCSRRepository_CreateCSR_Call {
	return &MockCSRRepository_CreateCSR_Call{Call: _e.mock.On("CreateCSR", _a0, _a1)}
}

func (_c *MockCSRRepository_CreateCSR_Call) Run(run func(_a0 context.Context, _a1 certs.CSR)) *MockCSRRepository_CreateCSR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(certs.CSR))
	})
	return _c
}

func (_c *MockCSRRepository_CreateCSR_Call) Return(_a0 error) *MockCSRRepository_CreateCSR_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCSRRepository_CreateCSR_Call) RunAndReturn(run func(context.Context, certs.CSR) error) *MockCSRRepository_CreateCSR_Call {
	_c.Call.Return(run)
	return _c
}

// ListCSRs provides a mock function with given fields: _a0, _a1
func (_m *MockCSRRepository) ListCSRs(_a0 context.Context, _a1 certs.PageMetadata) (certs.CSRPage, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListCSRs")
	}

	var r0 certs.CSRPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, certs.PageMetadata) (certs.CSRPage, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, certs.PageMetadata) certs.CSRPage); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(certs.CSRPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, certs.PageMetadata) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCSRRepository_ListCSRs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCSRs'
type MockCSRRepository_ListCSRs_Call struct {
	*mock.Call
}

// ListCSRs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 certs.PageMetadata
func (_e *MockCSRRepository_Expecter) ListCSRs(_a0 interface{}, _a1 interface{}) *MockCSRRepository_ListCSRs_Call {
	return &MockCSRRepository_ListCSRs_Call{Call: _e.mock.On("ListCSRs", _a0, _a1)}
}

func (_c *MockCSRRepository_ListCSRs_Call) Run(run func(_a0 context.Context, _a1 certs.PageMetadata)) *MockCSRRepository_ListCSRs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(certs.PageMetadata))
	})
	return _c
}

func (_c *MockCSRRepository_ListCSRs_Call) Return(_a0 certs.CSRPage, _a1 error) *MockCSRRepository_ListCSRs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCSRRepository_ListCSRs_Call) RunAndReturn(run func(context.Context, certs.PageMetadata) (certs.CSRPage, error)) *MockCSRRepository_ListCSRs_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveCSR provides a mock function with given fields: _a0, _a1
func (_m *MockCSRRepository) RetrieveCSR(_a0 context.Context, _a1 string) (certs.CSR, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveCSR")
	}

	var r0 certs.CSR
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (certs.CSR, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) certs.CSR); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(certs.CSR)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCSRRepository_RetrieveCSR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveCSR'
type MockCSRRepository_RetrieveCSR_Call struct {
	*mock.Call
}

// RetrieveCSR is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockCSRRepository_Expecter) RetrieveCSR(_a0 interface{}, _a1 interface{}) *MockCSRRepository_RetrieveCSR_Call {
	return &MockCSRRepository_RetrieveCSR_Call{Call: _e.mock.On("RetrieveCSR", _a0, _a1)}
}

func (_c *MockCSRRepository_RetrieveCSR_Call) Run(run func(_a0 context.Context, _a1 string)) *MockCSRRepository_RetrieveCSR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCSRRepository_RetrieveCSR_Call) Return(_a0 certs.CSR, _a1 error) *MockCSRRepository_RetrieveCSR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCSRRepository_RetrieveCSR_Call) RunAndReturn(run func(context.Context, string) (certs.CSR, error)) *MockCSRRepository_RetrieveCSR_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCSR provides a mock function with given fields: _a0, _a1
func (_m *MockCSRRepository) UpdateCSR(_a0 context.Context, _a1 certs.CSR) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCSR")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, certs.CSR) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCSRRepository_UpdateCSR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCSR'
type MockCSRRepository_UpdateCSR_Call struct {
	*mock.Call
}

// UpdateCSR is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 certs.CSR
func (_e *MockCSRRepository_Expecter) UpdateCSR(_a0 interface{}, _a1 interface{}) *MockCSRRepository_UpdateCSR_Call {
	return &MockCSRRepository_UpdateCSR_Call{Call: _e.mock.On("UpdateCSR", _a0, _a1)}
}

func (_c *MockCSRRepository_UpdateCSR_Call) Run(run func(_a0 context.Context, _a1 certs.CSR)) *MockCSRRepository_UpdateCSR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(certs.CSR))
	})
	return _c
}

func (_c *MockCSRRepository_UpdateCSR_Call) Return(_a0 error) *MockCSRRepository_UpdateCSR_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCSRRepository_UpdateCSR_Call) RunAndReturn(run func(context.Context, certs.CSR) error) *MockCSRRepository_UpdateCSR_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCSRRepository creates a new instance of MockCSRRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCSRRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCSRRepository {
	mock := &MockCSRRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
