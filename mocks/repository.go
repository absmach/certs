// Code generated by mockery v2.43.2. DO NOT EDIT.

// Copyright (c) Abstract Machines

package mocks

import (
	context "context"

	certs "github.com/absmach/certs"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateCert provides a mock function with given fields: ctx, cert
func (_m *Repository) CreateCert(ctx context.Context, cert certs.Certificate) error {
	ret := _m.Called(ctx, cert)

	if len(ret) == 0 {
		panic("no return value specified for CreateCert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, certs.Certificate) error); ok {
		r0 = rf(ctx, cert)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCerts provides a mock function with given fields: ctx, pm
func (_m *Repository) ListCerts(ctx context.Context, pm certs.PageMetadata) (certs.CertificatePage, error) {
	ret := _m.Called(ctx, pm)

	if len(ret) == 0 {
		panic("no return value specified for ListCerts")
	}

	var r0 certs.CertificatePage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, certs.PageMetadata) (certs.CertificatePage, error)); ok {
		return rf(ctx, pm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, certs.PageMetadata) certs.CertificatePage); ok {
		r0 = rf(ctx, pm)
	} else {
		r0 = ret.Get(0).(certs.CertificatePage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, certs.PageMetadata) error); ok {
		r1 = rf(ctx, pm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveCert provides a mock function with given fields: ctx, serialNumber
func (_m *Repository) RetrieveCert(ctx context.Context, serialNumber string) (certs.Certificate, error) {
	ret := _m.Called(ctx, serialNumber)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveCert")
	}

	var r0 certs.Certificate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (certs.Certificate, error)); ok {
		return rf(ctx, serialNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) certs.Certificate); ok {
		r0 = rf(ctx, serialNumber)
	} else {
		r0 = ret.Get(0).(certs.Certificate)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, serialNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCert provides a mock function with given fields: ctx, cert
func (_m *Repository) UpdateCert(ctx context.Context, cert certs.Certificate) error {
	ret := _m.Called(ctx, cert)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, certs.Certificate) error); ok {
		r0 = rf(ctx, cert)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
