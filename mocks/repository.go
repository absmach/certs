// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines
// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	"github.com/absmach/certs"
	mock "github.com/stretchr/testify/mock"
)

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// CreateCert provides a mock function for the type Repository
func (_mock *Repository) CreateCert(ctx context.Context, cert certs.Certificate) error {
	ret := _mock.Called(ctx, cert)

	if len(ret) == 0 {
		panic("no return value specified for CreateCert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, certs.Certificate) error); ok {
		r0 = returnFunc(ctx, cert)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Repository_CreateCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCert'
type Repository_CreateCert_Call struct {
	*mock.Call
}

// CreateCert is a helper method to define mock.On call
//   - ctx context.Context
//   - cert certs.Certificate
func (_e *Repository_Expecter) CreateCert(ctx interface{}, cert interface{}) *Repository_CreateCert_Call {
	return &Repository_CreateCert_Call{Call: _e.mock.On("CreateCert", ctx, cert)}
}

func (_c *Repository_CreateCert_Call) Run(run func(ctx context.Context, cert certs.Certificate)) *Repository_CreateCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 certs.Certificate
		if args[1] != nil {
			arg1 = args[1].(certs.Certificate)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Repository_CreateCert_Call) Return(err error) *Repository_CreateCert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Repository_CreateCert_Call) RunAndReturn(run func(ctx context.Context, cert certs.Certificate) error) *Repository_CreateCert_Call {
	_c.Call.Return(run)
	return _c
}

// GetCAs provides a mock function for the type Repository
func (_mock *Repository) GetCAs(ctx context.Context, caType ...certs.CertType) ([]certs.Certificate, error) {
	var tmpRet mock.Arguments
	if len(caType) > 0 {
		tmpRet = _mock.Called(ctx, caType)
	} else {
		tmpRet = _mock.Called(ctx)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetCAs")
	}

	var r0 []certs.Certificate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...certs.CertType) ([]certs.Certificate, error)); ok {
		return returnFunc(ctx, caType...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ...certs.CertType) []certs.Certificate); ok {
		r0 = returnFunc(ctx, caType...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]certs.Certificate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ...certs.CertType) error); ok {
		r1 = returnFunc(ctx, caType...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Repository_GetCAs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCAs'
type Repository_GetCAs_Call struct {
	*mock.Call
}

// GetCAs is a helper method to define mock.On call
//   - ctx context.Context
//   - caType ...certs.CertType
func (_e *Repository_Expecter) GetCAs(ctx interface{}, caType ...interface{}) *Repository_GetCAs_Call {
	return &Repository_GetCAs_Call{Call: _e.mock.On("GetCAs",
		append([]interface{}{ctx}, caType...)...)}
}

func (_c *Repository_GetCAs_Call) Run(run func(ctx context.Context, caType ...certs.CertType)) *Repository_GetCAs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []certs.CertType
		var variadicArgs []certs.CertType
		if len(args) > 1 {
			variadicArgs = args[1].([]certs.CertType)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *Repository_GetCAs_Call) Return(certificates []certs.Certificate, err error) *Repository_GetCAs_Call {
	_c.Call.Return(certificates, err)
	return _c
}

func (_c *Repository_GetCAs_Call) RunAndReturn(run func(ctx context.Context, caType ...certs.CertType) ([]certs.Certificate, error)) *Repository_GetCAs_Call {
	_c.Call.Return(run)
	return _c
}

// ListCerts provides a mock function for the type Repository
func (_mock *Repository) ListCerts(ctx context.Context, pm certs.PageMetadata) (certs.CertificatePage, error) {
	ret := _mock.Called(ctx, pm)

	if len(ret) == 0 {
		panic("no return value specified for ListCerts")
	}

	var r0 certs.CertificatePage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, certs.PageMetadata) (certs.CertificatePage, error)); ok {
		return returnFunc(ctx, pm)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, certs.PageMetadata) certs.CertificatePage); ok {
		r0 = returnFunc(ctx, pm)
	} else {
		r0 = ret.Get(0).(certs.CertificatePage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, certs.PageMetadata) error); ok {
		r1 = returnFunc(ctx, pm)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Repository_ListCerts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCerts'
type Repository_ListCerts_Call struct {
	*mock.Call
}

// ListCerts is a helper method to define mock.On call
//   - ctx context.Context
//   - pm certs.PageMetadata
func (_e *Repository_Expecter) ListCerts(ctx interface{}, pm interface{}) *Repository_ListCerts_Call {
	return &Repository_ListCerts_Call{Call: _e.mock.On("ListCerts", ctx, pm)}
}

func (_c *Repository_ListCerts_Call) Run(run func(ctx context.Context, pm certs.PageMetadata)) *Repository_ListCerts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 certs.PageMetadata
		if args[1] != nil {
			arg1 = args[1].(certs.PageMetadata)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Repository_ListCerts_Call) Return(certificatePage certs.CertificatePage, err error) *Repository_ListCerts_Call {
	_c.Call.Return(certificatePage, err)
	return _c
}

func (_c *Repository_ListCerts_Call) RunAndReturn(run func(ctx context.Context, pm certs.PageMetadata) (certs.CertificatePage, error)) *Repository_ListCerts_Call {
	_c.Call.Return(run)
	return _c
}

// ListRevokedCerts provides a mock function for the type Repository
func (_mock *Repository) ListRevokedCerts(ctx context.Context) ([]certs.Certificate, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListRevokedCerts")
	}

	var r0 []certs.Certificate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]certs.Certificate, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []certs.Certificate); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]certs.Certificate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Repository_ListRevokedCerts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRevokedCerts'
type Repository_ListRevokedCerts_Call struct {
	*mock.Call
}

// ListRevokedCerts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) ListRevokedCerts(ctx interface{}) *Repository_ListRevokedCerts_Call {
	return &Repository_ListRevokedCerts_Call{Call: _e.mock.On("ListRevokedCerts", ctx)}
}

func (_c *Repository_ListRevokedCerts_Call) Run(run func(ctx context.Context)) *Repository_ListRevokedCerts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Repository_ListRevokedCerts_Call) Return(certificates []certs.Certificate, err error) *Repository_ListRevokedCerts_Call {
	_c.Call.Return(certificates, err)
	return _c
}

func (_c *Repository_ListRevokedCerts_Call) RunAndReturn(run func(ctx context.Context) ([]certs.Certificate, error)) *Repository_ListRevokedCerts_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveCert provides a mock function for the type Repository
func (_mock *Repository) RemoveCert(ctx context.Context, entityId string) error {
	ret := _mock.Called(ctx, entityId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveCert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, entityId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Repository_RemoveCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveCert'
type Repository_RemoveCert_Call struct {
	*mock.Call
}

// RemoveCert is a helper method to define mock.On call
//   - ctx context.Context
//   - entityId string
func (_e *Repository_Expecter) RemoveCert(ctx interface{}, entityId interface{}) *Repository_RemoveCert_Call {
	return &Repository_RemoveCert_Call{Call: _e.mock.On("RemoveCert", ctx, entityId)}
}

func (_c *Repository_RemoveCert_Call) Run(run func(ctx context.Context, entityId string)) *Repository_RemoveCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Repository_RemoveCert_Call) Return(err error) *Repository_RemoveCert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Repository_RemoveCert_Call) RunAndReturn(run func(ctx context.Context, entityId string) error) *Repository_RemoveCert_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveCert provides a mock function for the type Repository
func (_mock *Repository) RetrieveCert(ctx context.Context, serialNumber string) (certs.Certificate, error) {
	ret := _mock.Called(ctx, serialNumber)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveCert")
	}

	var r0 certs.Certificate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (certs.Certificate, error)); ok {
		return returnFunc(ctx, serialNumber)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) certs.Certificate); ok {
		r0 = returnFunc(ctx, serialNumber)
	} else {
		r0 = ret.Get(0).(certs.Certificate)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, serialNumber)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Repository_RetrieveCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveCert'
type Repository_RetrieveCert_Call struct {
	*mock.Call
}

// RetrieveCert is a helper method to define mock.On call
//   - ctx context.Context
//   - serialNumber string
func (_e *Repository_Expecter) RetrieveCert(ctx interface{}, serialNumber interface{}) *Repository_RetrieveCert_Call {
	return &Repository_RetrieveCert_Call{Call: _e.mock.On("RetrieveCert", ctx, serialNumber)}
}

func (_c *Repository_RetrieveCert_Call) Run(run func(ctx context.Context, serialNumber string)) *Repository_RetrieveCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Repository_RetrieveCert_Call) Return(certificate certs.Certificate, err error) *Repository_RetrieveCert_Call {
	_c.Call.Return(certificate, err)
	return _c
}

func (_c *Repository_RetrieveCert_Call) RunAndReturn(run func(ctx context.Context, serialNumber string) (certs.Certificate, error)) *Repository_RetrieveCert_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeCertsByEntityID provides a mock function for the type Repository
func (_mock *Repository) RevokeCertsByEntityID(ctx context.Context, entityID string) error {
	ret := _mock.Called(ctx, entityID)

	if len(ret) == 0 {
		panic("no return value specified for RevokeCertsByEntityID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, entityID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Repository_RevokeCertsByEntityID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeCertsByEntityID'
type Repository_RevokeCertsByEntityID_Call struct {
	*mock.Call
}

// RevokeCertsByEntityID is a helper method to define mock.On call
//   - ctx context.Context
//   - entityID string
func (_e *Repository_Expecter) RevokeCertsByEntityID(ctx interface{}, entityID interface{}) *Repository_RevokeCertsByEntityID_Call {
	return &Repository_RevokeCertsByEntityID_Call{Call: _e.mock.On("RevokeCertsByEntityID", ctx, entityID)}
}

func (_c *Repository_RevokeCertsByEntityID_Call) Run(run func(ctx context.Context, entityID string)) *Repository_RevokeCertsByEntityID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Repository_RevokeCertsByEntityID_Call) Return(err error) *Repository_RevokeCertsByEntityID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Repository_RevokeCertsByEntityID_Call) RunAndReturn(run func(ctx context.Context, entityID string) error) *Repository_RevokeCertsByEntityID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCert provides a mock function for the type Repository
func (_mock *Repository) UpdateCert(ctx context.Context, cert certs.Certificate) error {
	ret := _mock.Called(ctx, cert)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, certs.Certificate) error); ok {
		r0 = returnFunc(ctx, cert)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Repository_UpdateCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCert'
type Repository_UpdateCert_Call struct {
	*mock.Call
}

// UpdateCert is a helper method to define mock.On call
//   - ctx context.Context
//   - cert certs.Certificate
func (_e *Repository_Expecter) UpdateCert(ctx interface{}, cert interface{}) *Repository_UpdateCert_Call {
	return &Repository_UpdateCert_Call{Call: _e.mock.On("UpdateCert", ctx, cert)}
}

func (_c *Repository_UpdateCert_Call) Run(run func(ctx context.Context, cert certs.Certificate)) *Repository_UpdateCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 certs.Certificate
		if args[1] != nil {
			arg1 = args[1].(certs.Certificate)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Repository_UpdateCert_Call) Return(err error) *Repository_UpdateCert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Repository_UpdateCert_Call) RunAndReturn(run func(ctx context.Context, cert certs.Certificate) error) *Repository_UpdateCert_Call {
	_c.Call.Return(run)
	return _c
}
