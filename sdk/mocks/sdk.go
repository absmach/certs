// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines
// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"github.com/absmach/certs/errors"
	"github.com/absmach/certs/sdk"
	mock "github.com/stretchr/testify/mock"
)

// NewSDK creates a new instance of SDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *SDK {
	mock := &SDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SDK is an autogenerated mock type for the SDK type
type SDK struct {
	mock.Mock
}

type SDK_Expecter struct {
	mock *mock.Mock
}

func (_m *SDK) EXPECT() *SDK_Expecter {
	return &SDK_Expecter{mock: &_m.Mock}
}

// DeleteCert provides a mock function for the type SDK
func (_mock *SDK) DeleteCert(entityID string) errors.SDKError {
	ret := _mock.Called(entityID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCert")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(string) errors.SDKError); ok {
		r0 = returnFunc(entityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// SDK_DeleteCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCert'
type SDK_DeleteCert_Call struct {
	*mock.Call
}

// DeleteCert is a helper method to define mock.On call
//   - entityID string
func (_e *SDK_Expecter) DeleteCert(entityID interface{}) *SDK_DeleteCert_Call {
	return &SDK_DeleteCert_Call{Call: _e.mock.On("DeleteCert", entityID)}
}

func (_c *SDK_DeleteCert_Call) Run(run func(entityID string)) *SDK_DeleteCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SDK_DeleteCert_Call) Return(sDKError errors.SDKError) *SDK_DeleteCert_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *SDK_DeleteCert_Call) RunAndReturn(run func(entityID string) errors.SDKError) *SDK_DeleteCert_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadCA provides a mock function for the type SDK
func (_mock *SDK) DownloadCA(token string) (sdk.CertificateBundle, errors.SDKError) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for DownloadCA")
	}

	var r0 sdk.CertificateBundle
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(string) (sdk.CertificateBundle, errors.SDKError)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) sdk.CertificateBundle); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(sdk.CertificateBundle)
	}
	if returnFunc, ok := ret.Get(1).(func(string) errors.SDKError); ok {
		r1 = returnFunc(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// SDK_DownloadCA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadCA'
type SDK_DownloadCA_Call struct {
	*mock.Call
}

// DownloadCA is a helper method to define mock.On call
//   - token string
func (_e *SDK_Expecter) DownloadCA(token interface{}) *SDK_DownloadCA_Call {
	return &SDK_DownloadCA_Call{Call: _e.mock.On("DownloadCA", token)}
}

func (_c *SDK_DownloadCA_Call) Run(run func(token string)) *SDK_DownloadCA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SDK_DownloadCA_Call) Return(certificateBundle sdk.CertificateBundle, sDKError errors.SDKError) *SDK_DownloadCA_Call {
	_c.Call.Return(certificateBundle, sDKError)
	return _c
}

func (_c *SDK_DownloadCA_Call) RunAndReturn(run func(token string) (sdk.CertificateBundle, errors.SDKError)) *SDK_DownloadCA_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadCert provides a mock function for the type SDK
func (_mock *SDK) DownloadCert(token string, serialNumber string) (sdk.CertificateBundle, errors.SDKError) {
	ret := _mock.Called(token, serialNumber)

	if len(ret) == 0 {
		panic("no return value specified for DownloadCert")
	}

	var r0 sdk.CertificateBundle
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(string, string) (sdk.CertificateBundle, errors.SDKError)); ok {
		return returnFunc(token, serialNumber)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) sdk.CertificateBundle); ok {
		r0 = returnFunc(token, serialNumber)
	} else {
		r0 = ret.Get(0).(sdk.CertificateBundle)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = returnFunc(token, serialNumber)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// SDK_DownloadCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadCert'
type SDK_DownloadCert_Call struct {
	*mock.Call
}

// DownloadCert is a helper method to define mock.On call
//   - token string
//   - serialNumber string
func (_e *SDK_Expecter) DownloadCert(token interface{}, serialNumber interface{}) *SDK_DownloadCert_Call {
	return &SDK_DownloadCert_Call{Call: _e.mock.On("DownloadCert", token, serialNumber)}
}

func (_c *SDK_DownloadCert_Call) Run(run func(token string, serialNumber string)) *SDK_DownloadCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SDK_DownloadCert_Call) Return(certificateBundle sdk.CertificateBundle, sDKError errors.SDKError) *SDK_DownloadCert_Call {
	_c.Call.Return(certificateBundle, sDKError)
	return _c
}

func (_c *SDK_DownloadCert_Call) RunAndReturn(run func(token string, serialNumber string) (sdk.CertificateBundle, errors.SDKError)) *SDK_DownloadCert_Call {
	_c.Call.Return(run)
	return _c
}

// GetCAToken provides a mock function for the type SDK
func (_mock *SDK) GetCAToken() (sdk.Token, errors.SDKError) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCAToken")
	}

	var r0 sdk.Token
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func() (sdk.Token, errors.SDKError)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() sdk.Token); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(sdk.Token)
	}
	if returnFunc, ok := ret.Get(1).(func() errors.SDKError); ok {
		r1 = returnFunc()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// SDK_GetCAToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCAToken'
type SDK_GetCAToken_Call struct {
	*mock.Call
}

// GetCAToken is a helper method to define mock.On call
func (_e *SDK_Expecter) GetCAToken() *SDK_GetCAToken_Call {
	return &SDK_GetCAToken_Call{Call: _e.mock.On("GetCAToken")}
}

func (_c *SDK_GetCAToken_Call) Run(run func()) *SDK_GetCAToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SDK_GetCAToken_Call) Return(token sdk.Token, sDKError errors.SDKError) *SDK_GetCAToken_Call {
	_c.Call.Return(token, sDKError)
	return _c
}

func (_c *SDK_GetCAToken_Call) RunAndReturn(run func() (sdk.Token, errors.SDKError)) *SDK_GetCAToken_Call {
	_c.Call.Return(run)
	return _c
}

// IssueCert provides a mock function for the type SDK
func (_mock *SDK) IssueCert(entityID string, ttl string, ipAddrs []string, opts sdk.Options) (sdk.Certificate, errors.SDKError) {
	ret := _mock.Called(entityID, ttl, ipAddrs, opts)

	if len(ret) == 0 {
		panic("no return value specified for IssueCert")
	}

	var r0 sdk.Certificate
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(string, string, []string, sdk.Options) (sdk.Certificate, errors.SDKError)); ok {
		return returnFunc(entityID, ttl, ipAddrs, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, []string, sdk.Options) sdk.Certificate); ok {
		r0 = returnFunc(entityID, ttl, ipAddrs, opts)
	} else {
		r0 = ret.Get(0).(sdk.Certificate)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, []string, sdk.Options) errors.SDKError); ok {
		r1 = returnFunc(entityID, ttl, ipAddrs, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// SDK_IssueCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IssueCert'
type SDK_IssueCert_Call struct {
	*mock.Call
}

// IssueCert is a helper method to define mock.On call
//   - entityID string
//   - ttl string
//   - ipAddrs []string
//   - opts sdk.Options
func (_e *SDK_Expecter) IssueCert(entityID interface{}, ttl interface{}, ipAddrs interface{}, opts interface{}) *SDK_IssueCert_Call {
	return &SDK_IssueCert_Call{Call: _e.mock.On("IssueCert", entityID, ttl, ipAddrs, opts)}
}

func (_c *SDK_IssueCert_Call) Run(run func(entityID string, ttl string, ipAddrs []string, opts sdk.Options)) *SDK_IssueCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 sdk.Options
		if args[3] != nil {
			arg3 = args[3].(sdk.Options)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *SDK_IssueCert_Call) Return(certificate sdk.Certificate, sDKError errors.SDKError) *SDK_IssueCert_Call {
	_c.Call.Return(certificate, sDKError)
	return _c
}

func (_c *SDK_IssueCert_Call) RunAndReturn(run func(entityID string, ttl string, ipAddrs []string, opts sdk.Options) (sdk.Certificate, errors.SDKError)) *SDK_IssueCert_Call {
	_c.Call.Return(run)
	return _c
}

// IssueFromCSR provides a mock function for the type SDK
func (_mock *SDK) IssueFromCSR(entityID string, ttl string, csr string) (sdk.Certificate, errors.SDKError) {
	ret := _mock.Called(entityID, ttl, csr)

	if len(ret) == 0 {
		panic("no return value specified for IssueFromCSR")
	}

	var r0 sdk.Certificate
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(string, string, string) (sdk.Certificate, errors.SDKError)); ok {
		return returnFunc(entityID, ttl, csr)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string) sdk.Certificate); ok {
		r0 = returnFunc(entityID, ttl, csr)
	} else {
		r0 = ret.Get(0).(sdk.Certificate)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = returnFunc(entityID, ttl, csr)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// SDK_IssueFromCSR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IssueFromCSR'
type SDK_IssueFromCSR_Call struct {
	*mock.Call
}

// IssueFromCSR is a helper method to define mock.On call
//   - entityID string
//   - ttl string
//   - csr string
func (_e *SDK_Expecter) IssueFromCSR(entityID interface{}, ttl interface{}, csr interface{}) *SDK_IssueFromCSR_Call {
	return &SDK_IssueFromCSR_Call{Call: _e.mock.On("IssueFromCSR", entityID, ttl, csr)}
}

func (_c *SDK_IssueFromCSR_Call) Run(run func(entityID string, ttl string, csr string)) *SDK_IssueFromCSR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *SDK_IssueFromCSR_Call) Return(certificate sdk.Certificate, sDKError errors.SDKError) *SDK_IssueFromCSR_Call {
	_c.Call.Return(certificate, sDKError)
	return _c
}

func (_c *SDK_IssueFromCSR_Call) RunAndReturn(run func(entityID string, ttl string, csr string) (sdk.Certificate, errors.SDKError)) *SDK_IssueFromCSR_Call {
	_c.Call.Return(run)
	return _c
}

// ListCerts provides a mock function for the type SDK
func (_mock *SDK) ListCerts(pm sdk.PageMetadata) (sdk.CertificatePage, errors.SDKError) {
	ret := _mock.Called(pm)

	if len(ret) == 0 {
		panic("no return value specified for ListCerts")
	}

	var r0 sdk.CertificatePage
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(sdk.PageMetadata) (sdk.CertificatePage, errors.SDKError)); ok {
		return returnFunc(pm)
	}
	if returnFunc, ok := ret.Get(0).(func(sdk.PageMetadata) sdk.CertificatePage); ok {
		r0 = returnFunc(pm)
	} else {
		r0 = ret.Get(0).(sdk.CertificatePage)
	}
	if returnFunc, ok := ret.Get(1).(func(sdk.PageMetadata) errors.SDKError); ok {
		r1 = returnFunc(pm)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// SDK_ListCerts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCerts'
type SDK_ListCerts_Call struct {
	*mock.Call
}

// ListCerts is a helper method to define mock.On call
//   - pm sdk.PageMetadata
func (_e *SDK_Expecter) ListCerts(pm interface{}) *SDK_ListCerts_Call {
	return &SDK_ListCerts_Call{Call: _e.mock.On("ListCerts", pm)}
}

func (_c *SDK_ListCerts_Call) Run(run func(pm sdk.PageMetadata)) *SDK_ListCerts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 sdk.PageMetadata
		if args[0] != nil {
			arg0 = args[0].(sdk.PageMetadata)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SDK_ListCerts_Call) Return(certificatePage sdk.CertificatePage, sDKError errors.SDKError) *SDK_ListCerts_Call {
	_c.Call.Return(certificatePage, sDKError)
	return _c
}

func (_c *SDK_ListCerts_Call) RunAndReturn(run func(pm sdk.PageMetadata) (sdk.CertificatePage, errors.SDKError)) *SDK_ListCerts_Call {
	_c.Call.Return(run)
	return _c
}

// OCSP provides a mock function for the type SDK
func (_mock *SDK) OCSP(serialNumber string, cert string) (sdk.OCSPResponse, errors.SDKError) {
	ret := _mock.Called(serialNumber, cert)

	if len(ret) == 0 {
		panic("no return value specified for OCSP")
	}

	var r0 sdk.OCSPResponse
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(string, string) (sdk.OCSPResponse, errors.SDKError)); ok {
		return returnFunc(serialNumber, cert)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) sdk.OCSPResponse); ok {
		r0 = returnFunc(serialNumber, cert)
	} else {
		r0 = ret.Get(0).(sdk.OCSPResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = returnFunc(serialNumber, cert)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// SDK_OCSP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OCSP'
type SDK_OCSP_Call struct {
	*mock.Call
}

// OCSP is a helper method to define mock.On call
//   - serialNumber string
//   - cert string
func (_e *SDK_Expecter) OCSP(serialNumber interface{}, cert interface{}) *SDK_OCSP_Call {
	return &SDK_OCSP_Call{Call: _e.mock.On("OCSP", serialNumber, cert)}
}

func (_c *SDK_OCSP_Call) Run(run func(serialNumber string, cert string)) *SDK_OCSP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SDK_OCSP_Call) Return(oCSPResponse sdk.OCSPResponse, sDKError errors.SDKError) *SDK_OCSP_Call {
	_c.Call.Return(oCSPResponse, sDKError)
	return _c
}

func (_c *SDK_OCSP_Call) RunAndReturn(run func(serialNumber string, cert string) (sdk.OCSPResponse, errors.SDKError)) *SDK_OCSP_Call {
	_c.Call.Return(run)
	return _c
}

// RenewCert provides a mock function for the type SDK
func (_mock *SDK) RenewCert(serialNumber string) errors.SDKError {
	ret := _mock.Called(serialNumber)

	if len(ret) == 0 {
		panic("no return value specified for RenewCert")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(string) errors.SDKError); ok {
		r0 = returnFunc(serialNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// SDK_RenewCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenewCert'
type SDK_RenewCert_Call struct {
	*mock.Call
}

// RenewCert is a helper method to define mock.On call
//   - serialNumber string
func (_e *SDK_Expecter) RenewCert(serialNumber interface{}) *SDK_RenewCert_Call {
	return &SDK_RenewCert_Call{Call: _e.mock.On("RenewCert", serialNumber)}
}

func (_c *SDK_RenewCert_Call) Run(run func(serialNumber string)) *SDK_RenewCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SDK_RenewCert_Call) Return(sDKError errors.SDKError) *SDK_RenewCert_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *SDK_RenewCert_Call) RunAndReturn(run func(serialNumber string) errors.SDKError) *SDK_RenewCert_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveCertDownloadToken provides a mock function for the type SDK
func (_mock *SDK) RetrieveCertDownloadToken(serialNumber string) (sdk.Token, errors.SDKError) {
	ret := _mock.Called(serialNumber)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveCertDownloadToken")
	}

	var r0 sdk.Token
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(string) (sdk.Token, errors.SDKError)); ok {
		return returnFunc(serialNumber)
	}
	if returnFunc, ok := ret.Get(0).(func(string) sdk.Token); ok {
		r0 = returnFunc(serialNumber)
	} else {
		r0 = ret.Get(0).(sdk.Token)
	}
	if returnFunc, ok := ret.Get(1).(func(string) errors.SDKError); ok {
		r1 = returnFunc(serialNumber)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// SDK_RetrieveCertDownloadToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveCertDownloadToken'
type SDK_RetrieveCertDownloadToken_Call struct {
	*mock.Call
}

// RetrieveCertDownloadToken is a helper method to define mock.On call
//   - serialNumber string
func (_e *SDK_Expecter) RetrieveCertDownloadToken(serialNumber interface{}) *SDK_RetrieveCertDownloadToken_Call {
	return &SDK_RetrieveCertDownloadToken_Call{Call: _e.mock.On("RetrieveCertDownloadToken", serialNumber)}
}

func (_c *SDK_RetrieveCertDownloadToken_Call) Run(run func(serialNumber string)) *SDK_RetrieveCertDownloadToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SDK_RetrieveCertDownloadToken_Call) Return(token sdk.Token, sDKError errors.SDKError) *SDK_RetrieveCertDownloadToken_Call {
	_c.Call.Return(token, sDKError)
	return _c
}

func (_c *SDK_RetrieveCertDownloadToken_Call) RunAndReturn(run func(serialNumber string) (sdk.Token, errors.SDKError)) *SDK_RetrieveCertDownloadToken_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeCert provides a mock function for the type SDK
func (_mock *SDK) RevokeCert(serialNumber string) errors.SDKError {
	ret := _mock.Called(serialNumber)

	if len(ret) == 0 {
		panic("no return value specified for RevokeCert")
	}

	var r0 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(string) errors.SDKError); ok {
		r0 = returnFunc(serialNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}
	return r0
}

// SDK_RevokeCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeCert'
type SDK_RevokeCert_Call struct {
	*mock.Call
}

// RevokeCert is a helper method to define mock.On call
//   - serialNumber string
func (_e *SDK_Expecter) RevokeCert(serialNumber interface{}) *SDK_RevokeCert_Call {
	return &SDK_RevokeCert_Call{Call: _e.mock.On("RevokeCert", serialNumber)}
}

func (_c *SDK_RevokeCert_Call) Run(run func(serialNumber string)) *SDK_RevokeCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SDK_RevokeCert_Call) Return(sDKError errors.SDKError) *SDK_RevokeCert_Call {
	_c.Call.Return(sDKError)
	return _c
}

func (_c *SDK_RevokeCert_Call) RunAndReturn(run func(serialNumber string) errors.SDKError) *SDK_RevokeCert_Call {
	_c.Call.Return(run)
	return _c
}

// ViewCA provides a mock function for the type SDK
func (_mock *SDK) ViewCA(token string) (sdk.Certificate, errors.SDKError) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ViewCA")
	}

	var r0 sdk.Certificate
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(string) (sdk.Certificate, errors.SDKError)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) sdk.Certificate); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(sdk.Certificate)
	}
	if returnFunc, ok := ret.Get(1).(func(string) errors.SDKError); ok {
		r1 = returnFunc(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// SDK_ViewCA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ViewCA'
type SDK_ViewCA_Call struct {
	*mock.Call
}

// ViewCA is a helper method to define mock.On call
//   - token string
func (_e *SDK_Expecter) ViewCA(token interface{}) *SDK_ViewCA_Call {
	return &SDK_ViewCA_Call{Call: _e.mock.On("ViewCA", token)}
}

func (_c *SDK_ViewCA_Call) Run(run func(token string)) *SDK_ViewCA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SDK_ViewCA_Call) Return(certificate sdk.Certificate, sDKError errors.SDKError) *SDK_ViewCA_Call {
	_c.Call.Return(certificate, sDKError)
	return _c
}

func (_c *SDK_ViewCA_Call) RunAndReturn(run func(token string) (sdk.Certificate, errors.SDKError)) *SDK_ViewCA_Call {
	_c.Call.Return(run)
	return _c
}

// ViewCert provides a mock function for the type SDK
func (_mock *SDK) ViewCert(serialNumber string) (sdk.Certificate, errors.SDKError) {
	ret := _mock.Called(serialNumber)

	if len(ret) == 0 {
		panic("no return value specified for ViewCert")
	}

	var r0 sdk.Certificate
	var r1 errors.SDKError
	if returnFunc, ok := ret.Get(0).(func(string) (sdk.Certificate, errors.SDKError)); ok {
		return returnFunc(serialNumber)
	}
	if returnFunc, ok := ret.Get(0).(func(string) sdk.Certificate); ok {
		r0 = returnFunc(serialNumber)
	} else {
		r0 = ret.Get(0).(sdk.Certificate)
	}
	if returnFunc, ok := ret.Get(1).(func(string) errors.SDKError); ok {
		r1 = returnFunc(serialNumber)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}
	return r0, r1
}

// SDK_ViewCert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ViewCert'
type SDK_ViewCert_Call struct {
	*mock.Call
}

// ViewCert is a helper method to define mock.On call
//   - serialNumber string
func (_e *SDK_Expecter) ViewCert(serialNumber interface{}) *SDK_ViewCert_Call {
	return &SDK_ViewCert_Call{Call: _e.mock.On("ViewCert", serialNumber)}
}

func (_c *SDK_ViewCert_Call) Run(run func(serialNumber string)) *SDK_ViewCert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SDK_ViewCert_Call) Return(certificate sdk.Certificate, sDKError errors.SDKError) *SDK_ViewCert_Call {
	_c.Call.Return(certificate, sDKError)
	return _c
}

func (_c *SDK_ViewCert_Call) RunAndReturn(run func(serialNumber string) (sdk.Certificate, errors.SDKError)) *SDK_ViewCert_Call {
	_c.Call.Return(run)
	return _c
}
