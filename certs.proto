// Copyright (c) Abstract Machines
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package absmach.certs;

import "google/protobuf/empty.proto";

import "google/protobuf/timestamp.proto";

option go_package = "./certs";

service CertsService {
  rpc GetEntityID(EntityReq) returns (EntityRes) {}
  rpc RevokeCerts(RevokeReq) returns (google.protobuf.Empty) {}
  rpc RetrieveCert(RetrieveCertReq) returns (CertificateBundle) {}
  rpc RetrieveCertDownloadToken(RetrieveCertDownloadTokenReq) returns (RetrieveCertDownloadTokenRes) {}
  rpc IssueCert(IssueCertReq) returns (IssueCertRes) {}
  rpc GetCA(GetCAReq) returns (Cert) {}
}

message EntityReq {
  string serial_number = 1;
}

message EntityRes {
  string entity_id = 1;
}

message RevokeReq {
  string entity_id = 1;
}

message Cert {
  string serial_number = 1;
  string certificate = 2;
  string key = 3;
  bool revoked = 4;
  google.protobuf.Timestamp expiry_time = 5;
  string entity_id = 6;
  string download_url = 7;
}

message CertificateBundle {
  bytes ca = 1;
  bytes certificate = 2;
  bytes private_key = 3;
}

message RetrieveCertReq {
  string download_token = 1;
  string serial_number = 2;
}

message RetrieveCertDownloadTokenReq {
  string domain_id = 1;
  string serial_number = 2;
  string user_id = 3;
}

message RetrieveCertDownloadTokenRes {
  string token = 1;
}

message Options {
  string common_name = 1;
  repeated string organization = 2;
  repeated string organizational_unit = 3;
  repeated string country = 4;
  repeated string province = 5;
  repeated string locality = 6;
  repeated string street_address = 7;
  repeated string postal_code = 8;
  repeated string dns_names = 9;
  repeated string ip_addresses = 10;
}

message IssueCertReq {
  string domain_id = 1;
  string entity_id = 2;
  string entity_type = 3;
  repeated string ip_addresses = 4;
  string user_id = 5;
  string ttl = 6;
  Options subject_options = 7;
}

message IssueCertRes {
  string serial_number = 1;
}

message GetCAReq {}

